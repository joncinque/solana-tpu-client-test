[package]
name = "solana-tpu-client-test"
description = "Solana TPU Client Test"
documentation = "https://docs.rs/solana-tpu-client-test"
publish = false
version = "0.1.0"
edition = "2021"

[dependencies]
bincode = "1"
bs58 = "0.5"
clap = { version = "3", features = ["derive"] }
log = "0.4"
solana-account-decoder = { path = "../solana/account-decoder" }
solana-clap-v3-utils = { path = "../solana/clap-v3-utils" }
solana-cli-config = { path = "../solana/cli-config" }
solana-client = { path = "../solana/client" }
solana-connection-cache = { path = "../solana/connection-cache" }
solana-logger = { path = "../solana/logger" }
solana-program = { path = "../solana/sdk/program" }
solana-pubsub-client = { path = "../solana/pubsub-client" }
solana-remote-wallet = { path = "../solana/remote-wallet" }
solana-rpc = { path = "../solana/rpc" }
solana-rpc-client = { path = "../solana/rpc-client" }
solana-rpc-client-api = { path = "../solana/rpc-client-api" }
solana-sdk = { path = "../solana/sdk" }
solana-streamer = { path = "../solana/streamer" }
solana-tpu-client = { path = "../solana/tpu-client" }
solana-zk-token-sdk = { path = "../solana/zk-token-sdk" }
tokio = { version = "1", features = ["full"] }

[dev-dependencies]
solana-test-validator = { path = "../solana/test-validator" }

[patch.crates-io]
# We include the following crates as our dependencies above from crates.io:
#
#  * spl-associated-token-account
#  * spl-instruction-padding
#  * spl-memo
#  * spl-pod
#  * spl-token
#  * spl-token-2022
#  * spl-token-metadata-interface
#
# They, in turn, depend on a number of crates that we also include directly
# using `path` specifications.  For example, `spl-token` depends on
# `solana-program`.  And we explicitly specify `solana-program` above as a local
# path dependency:
#
#     solana-program = { path = "../../sdk/program", version = "=1.16.0" }
#
# Unfortunately, Cargo will try to resolve the `spl-token` `solana-program`
# dependency only using what is available on crates.io.  Crates.io normally
# contains a previous version of these crates, and we end up with two versions
# of `solana-program` and `solana-zk-token-sdk` and all of their dependencies in
# our build tree.
#
# If you are developing downstream using non-crates-io solana-program (local or
# forked repo, or from github rev, eg), duplicate the following patch statements
# in your Cargo.toml. If you still hit duplicate-type errors with the patch
# statements in place, run `cargo update -p solana-program` and/or `cargo update
# -p solana-zk-token-sdk` to remove extraneous versions from your Cargo.lock
# file.
#
# There is a similar override in `programs/sbf/Cargo.toml`.  Please keep both
# comments and the overrides in sync.
solana-program = { path = "../solana/sdk/program" }
solana-zk-token-sdk = { path = "../solana/zk-token-sdk" }
#
# === zeroize versioning issues ===
#
# A number of packages used explicit upper bound on the `zeroize` package, such
# as `>=1, <1.4`.  The problem is that cargo still does not duplicate `zeroize`
# if a newer version is available and requested by another package and just
# fails the whole dependency resolution process.
#
# This is described in
#
# https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-requirements
#
# So we have to patch `zeroize` dependency specifications in the projects that
# introduce these constraints.  They have already removed these constraints in
# newer versions, but we have not updated yet.  As we update, we need to remove
# these patch requests.
#
# When our dependencies are upgraded, we can remove these patches.  Before that
# we might need to maintain these patches in sync with our full dependency tree.

# Our dependency tree has `aes-gcm-siv` v0.10.3 and the `zeroize` restriction
# was removed in the next commit just after the release.  So it seems safe to
# patch to this commit.
#
# `aes-gcm-siv` v0.10.3 release:
#
# https://github.com/RustCrypto/AEADs/releases/tag/aes-gcm-siv-v0.10.3
#
# Corresponds to commit
#
# https://github.com/RustCrypto/AEADs/commit/6f16f4577a1fc839a2346cf8c5531c85a44bf5c0
#
# Comparison with `6105d7a5591aefa646a95d12b5e8d3f55a9214ef` pinned here:
#
# https://github.com/RustCrypto/AEADs/compare/aes-gcm-siv-v0.10.3..6105d7a5591aefa646a95d12b5e8d3f55a9214ef
#
[patch.crates-io.aes-gcm-siv]
git = "https://github.com/RustCrypto/AEADs"
rev = "6105d7a5591aefa646a95d12b5e8d3f55a9214ef"

# Our dependency tree has `curve25519-dalek` v3.2.1.  They have removed the
# constraint in the next major release. The commit that removes the `zeroize`
# constraint was added to multiple release branches, but not to the 3.2 branch.
#
# `curve25519-dalek` maintainers are saying they do not want to invest any more
# time in the 3.2 release:
#
# https://github.com/dalek-cryptography/curve25519-dalek/issues/452#issuecomment-1749809428
#
# So we have to fork and create our own release, based on v3.2.1, with the
# commit that removed `zeroize` constraint on the `main` branch cherry-picked on
# top.
#
# `curve25519-dalek` v3.2.1 release:
#
# https://github.com/dalek-cryptography/curve25519-dalek/releases/tag/3.2.1
#
# Corresponds to commit
#
# https://github.com/dalek-cryptography/curve25519-dalek/commit/29e5c29b0e5c6821e4586af58b0d0891dd2ec639
#
# Comparison with `b500cdc2a920cd5bff9e2dd974d7b97349d61464`:
#
# https://github.com/dalek-cryptography/curve25519-dalek/compare/3.2.1...solana-labs:curve25519-dalek:b500cdc2a920cd5bff9e2dd974d7b97349d61464
#
# Or, using the branch name instead of the hash:
#
# https://github.com/dalek-cryptography/curve25519-dalek/compare/3.2.1...solana-labs:curve25519-dalek:3.2.1-unpin-zeroize
#
[patch.crates-io.curve25519-dalek]
git = "https://github.com/solana-labs/curve25519-dalek.git"
rev = "b500cdc2a920cd5bff9e2dd974d7b97349d61464"
